※TAB:4

pk1_bas -初代ポケモン　任意コード実行バグ支援アプリケーション-

・任意コード実行バグ　実行パターン想定：なかよしバッヂ→育てやポケモンニックネーム「てウんのの」・「てEんのの」→ボックス内ポケモンニックネーム

・フォルダ内のもの
	(フォルダ)src						：このアプリのソースコードが入っています。
	(フォルダ)x86						：32ビット版アプリが入っています
	ABOUT.txt							：このアプリについての説明(このファイル)
	hex_to_mne.txt						：コードとニーモニックの対応表(のようなもの)
	hex_to_mne_op.txt					：命令別に分けたコードとニーモニックの対応表(のようなもの)
	hex_to_mne_can_be_input_chars.txt	：入力可能文字に対応するコードとニーモニックの対応表(のようなもの)
	pk1_bas.exe							：本体
	dispChars.exe						：文字と内部コードの一覧を表示するプログラム
	dispCredits.exe						：参考情報源のアドレスを表示するプログラム
	dispChars.bat						：dispChars.exeを本体から呼び出すためのバッチファイル
	dispCredits.bat						：dispCredits.exeを本体から呼び出すためのバッチファイル
	※バッチファイルは、消してしまっても本体を起動すると自動的に生成されます
	　また、自動では消えません。

・何ができるか
	→16進数、10進数の値を256で割った余りの計算
	→指定した内部コード(16進数)に対応するポケモン/ポケモントレーナー名・文字・わざ名・道具名の表示
	　複数バイトの内部コードから、対応するポケモン/ポケモントレーナー名・文字・わざ名・道具名の表示,逆アセンブリ
	→わざ名・文字/文字列・ポケモン/ポケモントレーナー名・どうぐの検索
	→逆アセンブリ結果・対応する文字・対応するアイテムとその個数の一覧をファイルに書き出す。

・使い方
	pk1_bas.exeを起動すると画面が3つ出てきます。
	1つが本体(pk1_bas.exe)、「文字列一覧」が文字と内部コードの一覧を表示するだけのプログラム(dispChars.exe)、
	「参考情報源」は、プログラムを作成する際に参考にさせていただいたサイトのアドレスを表示するプログラム(dispCredits.exe)です。
	文字と内部コードの一覧は、任意コード実行(5かいバグ)などに役立てばと思います。
	本体以外のウィンドウは、本体を終了しても勝手には閉じません。手動で閉じてください。
	
	このアプリはWindows環境でスタンドアロンにて起動できますが、CUI(コンソールアプリケーション)です。
	そのため、機能の指定などはすべて数値で行います。基本的にマウスは使いません。
	というか(コマンドプロンプトが簡易編集モードになっていない限り)マウスは使えません。
	〜(機能)：xxx(数値)という表示が出ますから、表示された数値をキーボードで入力してください。
	本当ならば、よく見るようなGUIにしたかったところですが、作者の力不足で現在はできていませんorz
	ご了承ください。
	
	複数バイトのコード列からの表示について：
		2桁ずつ区切らなくても入力できます。
		ただし、16進数の表記によくあるような、0xXXやXXhというような表記には対応していません。
		たとえば「BFh」と入力した場合、hの位置に意図しない値(00)が出てきてしまいます。
		また、すべての値を入力し終わったあとにEnter→Ctrl+Zという手順になりますが、
		入力終了のEnterの前に入力された半角スペース(最後に入力された半角スペース)は無視されず「0x0B」が入ってしまいます。
		Enterキーを押す前に半角スペースは入れないことをおすすめします。
		この仕様は後に修正する方針です。
	
	ニーモニックと内部コードの対応に関して：
		一覧表示すると行数が多くなりすぎるので、別添のテキストファイル(hex_to_mne.txt)を参照してください。
	
	コードから得られた、逆アセンブリ結果(AsmOut.txt)・どうぐと個数の一覧(toolsOut.txt)・文字一覧(strOut.txt)のファイルについて：
		「この説明ファイル(ABOUT.txt)」と「コードとニーモニックの対応表(hex_to_mne.txt)」はTAB4文字分を想定していますが、
		アプリが出力するファイルのTABの文字数に関しては、コンソールウィンドウの体裁に合わせている都合、8文字分の想定になります。
		また、見やすさのためには等幅フォントを推奨します。	
		文字コードはShift-JIS(CP932)です。WindowsのコンソールウィンドウはShift-JIS(CP932)が標準になっています。
	

・hex_to_mne.txtの中身について：
	中を見ると「%02X」という、人によっては見慣れない(かもしれない)文字列があります。
	これは、対応表(のようなもの)の内容自体はソースコードからそのまま抜粋しているために入っているものです。
	この文字列は16進数2桁を指します。具体的には「C7」などという値です。
	たとえば「0x%02X」は、具体的な値(C7など)が与えられた場合、プログラム内で実際に表示された時に「0xC7」という形になります。
	(C言語に触れたことがある場合は見慣れていると思います。つまりC言語で書いています。ソースコードの拡張子は「.cpp」ですが。)

・動作確認環境
	OS		：Windows 10 home x64(バージョン1709 ビルド16299.492)
	CPU		：Intel(R) Core(TM) i5-4690
	メモリ	：8.0GB DDR3

・Ubuntu (18.04 LTS) 上のwine(wine-3.0 (Ubuntu 3.0-1ubuntu1))における動作は保証しません。
　筆者の環境では文字化けしました(Ubuntuコンソールに於いてはUTF-8が標準のため)。
　ただし、コンソールの文字コードを変更する手順がある場合はそれによって解決するかもしれません。

・これまでの履歴	
	仮ver
	v0.1：とりあえず256で割った余りを表示するプログラムを書いた(当時の名前：256Spls)
	v0.2：同じこと繰り返すよなー・・・と思い、繰り返し入力できるようにした
	v0.3：いちいちコードと対応付けするのがメンドイ→各種データを自動で表示するようにした
	v0.4：名前で検索したい→試験的に検索機能を実装
	v0.5：任意コード実行で使う機会の方が多い→逆アセンブリ機能を実装。しかしZ80とは少し訳が違った。
		　Z80のほうが機能が多いし、同じコードでもDMG-CPUと動作が違うらしい。		
	v0.6：DMG-CPU向けに修正
	v0.7：文字とコードの対応を一覧表示したい→一覧表示プログラムを実装
	v0.8：参考情報源を別窓に表示するようにした(pk1_basに名前を変更)
